const AchievementsManager = {
    ACHIEVEMENTS: {
        FIRST_STEPS: {
            id: 'first_steps',
            title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
            description: '–ü—Ä–æ–π–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ—Å—Ç',
            icon: 'üéØ'
        },
        ANIME_EXPERT: {
            id: 'anime_expert',
            title: '–ó–Ω–∞—Ç–æ–∫ –∞–Ω–∏–º–µ',
            description: '–ü—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ —Ç–µ—Å—Ç—ã',
            icon: 'üèÜ'
        },
        PERFECT_SCORE: {
            id: 'perfect_score',
            title: '–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            description: '–ü–æ–ª—É—á–∏—Ç–µ 100% –≤ –ª—é–±–æ–º —Ç–µ—Å—Ç–µ',
            icon: '‚≠ê'
        },
        HIGH_SCORE: {
            id: 'high_score',
            title: '–í—ã—Å–æ–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            description: '–ü–æ–ª—É—á–∏—Ç–µ –±–æ–ª–µ–µ 80% –≤ –ª—é–±–æ–º —Ç–µ—Å—Ç–µ',
            icon: '‚ú®'
        },
        PERSISTENT: {
            id: 'persistent',
            title: '–ù–∞—Å—Ç–æ–π—á–∏–≤—ã–π',
            description: '–ü—Ä–æ–π–¥–∏—Ç–µ –æ–¥–∏–Ω —Ç–µ—Å—Ç 5 —Ä–∞–∑',
            icon: 'üîÑ'
        },
        SPEED_RUNNER: {
            id: 'speed_runner',
            title: '–°–ø–∏–¥—Ä–∞–Ω–Ω–µ—Ä',
            description: '–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 –º–∏–Ω—É—Ç—ã',
            icon: '‚ö°'
        },
        COLLECTOR: {
            id: 'collector',
            title: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
            description: '–ù–∞–±–µ—Ä–∏—Ç–µ 1000 –æ—á–∫–æ–≤',
            icon: 'üíé'
        },
        NIGHT_OWL: {
            id: 'night_owl',
            title: '–ù–æ—á–Ω–∞—è —Å–æ–≤–∞',
            description: '–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏',
            icon: 'üåô'
        },
        EARLY_BIRD: {
            id: 'early_bird',
            title: '–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞',
            description: '–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –¥–æ 7 —É—Ç—Ä–∞',
            icon: 'üåÖ'
        }
    },

    checkAchievements(testId, score, totalQuestions, timeTaken) {

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
        this.grantAchievement('FIRST_STEPS');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
        if (score === totalQuestions) {
            this.grantAchievement('PERFECT_SCORE');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Å–æ–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–±–æ–ª–µ–µ 80%)
        if (score >= totalQuestions * 0.8) {
            this.grantAchievement('HIGH_SCORE');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        const testsProgress = UserManager.getTestsProgress();
        const uniqueTestsCompleted = Object.keys(testsProgress).length;
        if (uniqueTestsCompleted >= 8) {
            this.grantAchievement('ANIME_EXPERT');
        }

        // –ù–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
        if (testsProgress[testId]?.attempts >= 5) {
            this.grantAchievement('PERSISTENT');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∏–¥—Ä–∞–Ω (–µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–Ω—å—à–µ 2 –º–∏–Ω—É—Ç)
        if (timeTaken && timeTaken < 120000) {
            this.grantAchievement('SPEED_RUNNER');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤
        if (UserManager.getPoints() >= 1000) {
            this.grantAchievement('COLLECTOR');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        const currentHour = new Date().getHours();
        if (currentHour >= 0 && currentHour < 6) {
            this.grantAchievement('NIGHT_OWL');
        }
        if (currentHour >= 5 && currentHour < 7) {
            this.grantAchievement('EARLY_BIRD');
        }
    },

    grantAchievement(achievementKey) {
        const achievement = this.ACHIEVEMENTS[achievementKey];
        if (!achievement) return;

        const userAchievements = UserManager.getAchievements();
        if (!userAchievements.includes(achievement.id)) {
            userAchievements.push(achievement.id);
            UserManager.setAchievements(userAchievements);
            this.showAchievementNotification(achievement);
        }
    },

    showAchievementNotification(achievement) {
        const notification = document.createElement('div');
        notification.className = 'achievement-notification';
        notification.innerHTML = `
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-info">
                <h3>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</h3>
                <p>${achievement.title}</p>
                <p>${achievement.description}</p>
            </div>
        `;

        document.body.appendChild(notification);
        setTimeout(() => notification.classList.add('show'), 100);
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    },

    getAchievementInfo(achievementId) {
        return Object.values(this.ACHIEVEMENTS).find(a => a.id === achievementId);
    },

    renderAchievements(container) {
        const userAchievements = UserManager.getAchievements();
        const allAchievements = Object.values(this.ACHIEVEMENTS);
        
        const achievementsHTML = allAchievements.map(achievement => {
            const isUnlocked = userAchievements.includes(achievement.id);
            return `
                <div class="achievement-item ${isUnlocked ? 'unlocked' : 'locked'}">
                    <div class="achievement-icon">${achievement.icon}</div>
                    <div class="achievement-info">
                        <div class="achievement-title">${achievement.title}</div>
                        <div class="achievement-description">${achievement.description}</div>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = achievementsHTML;
    }
}; 